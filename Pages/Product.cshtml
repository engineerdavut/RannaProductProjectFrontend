@page
@model RannaProductProjectFrontend.Pages.ProductModel
@{
    ViewData["Title"] = "Ürünler";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <title>Ürün Yönetimi</title>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <style>
        body {
            display: flex;
            flex-direction: column;
            min-height: 100vh; /* Sayfanın en az %100 yüksekliğinde olmasını sağlar */
        }

        #productList {
            flex: 1; /* Ürün listesi alanının büyümesini sağlar */
            overflow-y: auto; /* Kaydırma çubuğu ekler */
            margin-bottom: 20px; /* Footer ile içeriği ayırır */
        }

        footer {
            background-color: #f1f1f1;
            padding: 10px;
            text-align: center;
        }

        .form-section {
            margin-bottom: 30px; /* Form bölümleri arasında boşluk */
        }

        #updateProductForm {
            display: none; /* Başlangıçta gizli */
        }
    </style>
</head>
<body>
    <div class="container">
        <h2>Ürün İşlemleri</h2>

        <!-- Ürünleri listele -->
        <div id="productList" class="mb-4"></div>

        <!-- Ürün ekleme formu -->
        <div class="form-section">
            <h3>Yeni Ürün Ekle</h3>
            <form id="productForm">
                <div class="form-group">
                    <label>Ürün Adı:</label>
                    <input type="text" id="productName" class="form-control" required />
                </div>
                <div class="form-group">
                    <label>Ürün Kodu:</label>
                    <input type="text" id="productCode" class="form-control" required />
                </div>
                <div class="form-group">
                    <label>Ürün Stok:</label>
                    <input type="text" id="productStock" class="form-control" required />
                </div>
                <div class="form-group">
                    <label>Fiyat:</label>
                    <input type="number" id="productPrice" class="form-control" required />
                </div>
                <div class="form-group">
                    <label>Resim URL'si:</label>
                    <input type="text" id="productImage" class="form-control" required />
                </div>
                <button type="submit" class="btn btn-success">Ürün Ekle</button>
            </form>
        </div>

        <!-- Ürün güncelleme formu -->
        <div class="form-section">
            
            <form id="updateProductForm">
                <h3>Ürün Güncelle</h3>
                <input type="hidden" id="updateProductId" />
                <div class="form-group">
                    <label>Ürün Adı:</label>
                    <input type="text" id="updateProductName" class="form-control" required />
                </div>
                <div class="form-group">
                    <label>Ürün Kodu:</label>
                    <input type="text" id="updateProductCode" class="form-control" required />
                </div>
                <div class="form-group">
                    <label>Ürün Stok:</label>
                    <input type="text" id="updateProductStock" class="form-control" required />
                </div>
                <div class="form-group">
                    <label>Fiyat:</label>
                    <input type="number" id="updateProductPrice" class="form-control" required />
                </div>
                <div class="form-group">
                    <label>Resim URL'si:</label>
                    <input type="text" id="updateProductImage" class="form-control" required />
                </div>
                <button type="submit" class="btn btn-primary">Güncelle</button>
            </form>
        </div>

        <footer>
            <p>Footer İçeriği</p>
        </footer>
    </div>

    <script>
        const token = new URLSearchParams(window.location.search).get('token');

        // Token doğrulama
        if (!token) {
            alert('Geçersiz token.');
            window.location.href = '/'; // Token yoksa ana sayfaya dön
        }

        // Ürünleri listeleme işlemi
        function getProducts() {
            fetch('https://localhost:7196/api/product/products', {
                headers: {
                    'Authorization': 'Bearer ' + token
                }
            })
                .then(response => response.json())
                .then(data => {
                    const productList = document.getElementById('productList');
                    productList.innerHTML = data.map(product => `
                                            <div class="card mb-2">
                                                <div class="card-body">
                                                    <h4>${product.productName}</h4>
                                                    <p>Kodu: ${product.code} - Stok: ${product.stock} - Fiyat: ${product.price}</p>
                                                    <img src="${product.image}" alt="${product.productName}" style="width: 100px; height: auto;" />
                                                    <button class="btn btn-danger" onclick="deleteProduct(${product.id})">Sil</button>
                                                    <button class="btn btn-warning" onclick="showUpdateForm(${product.id})">Güncelle</button>
                                                </div>
                                            </div>
                                        `).join('');
                })
                .catch(error => console.error('Error fetching products:', error));
        }

        // Ürün ekleme işlemi
        document.getElementById('productForm').addEventListener('submit', function (e) {
            e.preventDefault();

            const productName = document.getElementById('productName').value;
            const productStock = document.getElementById('productStock').value;
            const productCode = document.getElementById('productCode').value;
            const productPrice = document.getElementById('productPrice').value;
            const productImage = document.getElementById('productImage').value;

            fetch('https://localhost:7196/api/product', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': 'Bearer ' + token
                },
                body: JSON.stringify({
                    productName: productName,
                    code: productCode,
                    stock: productStock,
                    price: productPrice,
                    image: productImage
                })
            })
                .then(response => response.json())
                .then(() => {
                    alert('Ürün başarıyla eklendi!');
                    getProducts(); // Ürün listesi yenilenir
                })
                .catch(error => console.error('Error adding product:', error));
        });

        // Ürün silme işlemi
        function deleteProduct(productId) {
            fetch(`https://localhost:7196/api/product/${productId}`, {
                method: 'DELETE',
                headers: {
                    'Authorization': 'Bearer ' + token
                }
            })
                .then(() => {
                    alert('Ürün silindi!');
                    getProducts();
                })
                .catch(error => console.error('Error deleting product:', error));
        }

        // Ürün güncelleme formunu göster
        function showUpdateForm(productId) {
            fetch(`https://localhost:7196/api/product/${productId}`, {
                headers: {
                    'Authorization': 'Bearer ' + token
                }
            })
                .then(response => response.json())
                .then(product => {
                    document.getElementById('updateProductId').value = product.id;
                    document.getElementById('updateProductName').value = product.productName;
                    document.getElementById('updateProductCode').value = product.code;
                    document.getElementById('updateProductStock').value = product.stock;
                    document.getElementById('updateProductPrice').value = product.price;
                    document.getElementById('updateProductImage').value = product.image;

                    // Güncelleme formunu göster
                    document.getElementById('updateProductForm').style.display = 'block';
                    // Sayfanın kaydırılmasını sağla
                    window.scrollTo(0, document.body.scrollHeight);
                })
                .catch(error => console.error('Error fetching product:', error));
        }

        // Ürün güncelleme işlemi
        document.getElementById('updateProductForm').addEventListener('submit', function (e) {
            e.preventDefault();

            const productId = document.getElementById('updateProductId').value;
            const productName = document.getElementById('updateProductName').value;
            const productStock = document.getElementById('updateProductStock').value;
            const productCode = document.getElementById('updateProductCode').value;
            const productPrice = document.getElementById('updateProductPrice').value;
            const productImage = document.getElementById('updateProductImage').value;

            fetch(`https://localhost:7196/api/product/${productId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': 'Bearer ' + token
                },
                body: JSON.stringify({
                    id: productId,
                    productName: productName,
                    code: productCode,
                    stock: productStock,
                    price: productPrice,
                    image: productImage
                })
            })
                .then(() => {
                    alert('Ürün başarıyla güncellendi!');
                    getProducts(); // Ürün listesi yenilenir
                    document.getElementById('updateProductForm').reset(); // Formu sıfırla
                    document.getElementById('updateProductForm').style.display = 'none'; // Formu gizle
                })
                .catch(error => console.error('Error updating product:', error));
        });

        // Sayfa yüklendiğinde ürünleri getir
        getProducts();
    </script>
</body>
</html>

